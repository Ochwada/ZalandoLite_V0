package com.zalando.lite;

import com.zalando.lite.customer.Customer;
import com.zalando.lite.managers.InventoryManager;
import com.zalando.lite.managers.OrderManager;
import com.zalando.lite.order.Order;
import com.zalando.lite.order.OrderItem;
import com.zalando.lite.products.Product;
import org.junit.jupiter.api.*;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Unit tests for {@link OrderManager}.
 * <p>
 * These tests verify:
 * - Order creation with valid stock
 * - Orders are stored and retrieved correctly
 * - Orders fail when products are out of stock
 * - Inventory updates correctly after order
 * <p>
 * Concepts reinforced:
 * - Control flow testing
 * - State mutation (inventory reduction)
 * - Object relationships (Order â†’ Customer + Items)
 */
public class OrderManagerTest {

    private InventoryManager inventoryManager;
    private OrderManager orderManager;
    private Customer testCustomer;

    @BeforeEach
    void setUp() {
        // Prepare managers and a test customer
        inventoryManager = new InventoryManager();
        orderManager = new OrderManager(inventoryManager);
        testCustomer = new Customer();

        // Set basic customer info (e.g., ID)
        testCustomer.setName("Linda");
        testCustomer.setEmail("linda@gmx.de");
        testCustomer.setVip(true);

    }

    @Test
    void testCreateOrderSuccess() {
        // Add product with enough stock to inventory
        Product product = new Product("Sneakers", "footwear", 79.99, 10);  // stock = 10
        inventoryManager.addProduct(product); // ID will be 1000 (autogenerated)

        int id = product.getId();

        // Create OrderItem and call createOrder
        OrderItem item = new OrderItem(product, 2);
        List<OrderItem> items = List.of(item);

        // - Set test customer ID and name (if not already set in setUp)
        testCustomer.setName("Linda");

        // Step 4: Create the order
        com.zalando.lite.order.Order order = orderManager.createOrder(testCustomer, items);

        // Assert order is not null
        assertNotNull(order, "Order should be created successfully.");

        // Assert total price and order fields are correct
        double expectedTotal = 79.99 * 2;
        assertEquals(expectedTotal, order.calculateTotal(), 0.01, "Total price should match expected.");

        // Step 7: Assert customer and items are assigned correctly
        assertEquals(testCustomer.getId(), order.getCustomer().getId(), "Customer should be assigned to order.");
        assertEquals(1, order.getItems().size(), "Order should contain 1 item.");
        assertEquals(2, order.getItems().get(0).getQuantity(), "Ordered quantity should be 2.");
    }

    @Test
    void testCreateOrderFailsIfOutOfStock() {
        Product product = new Product("Gaming Mouse", "electronics", 49.99, 0); // stock = 0
        inventoryManager.addProduct(product); // Should get ID 1000

        // Add product with 0 stock
        OrderItem item = new OrderItem(product, 1);
        List<OrderItem> items = List.of(item);

        testCustomer.setId(2);
        testCustomer.setName("Maya");

        // Try to create an order and assert the result is null or handled safely
        com.zalando.lite.order.Order order = orderManager.createOrder(testCustomer, items);

        // Assert that order creation fails
        assertNull(order, "Order should not be created if product is out of stock.");
    }

    @Test
    void testOrdersAreStoredByCustomer() {
        Product product = new Product("Sneakers", "footwear", 79.99, 10);
        inventoryManager.addProduct(product); // ID should be 1000

        // Create two orders for the same customer
        OrderItem item1 = new OrderItem(product, 1);
        OrderItem item2 = new OrderItem(product, 1);


        // Retrieve orders using getOrdersForCustomer
        // Assert the list contains both orders
        testCustomer.setName("Luna");

        // Create two orders for the same customer
        com.zalando.lite.order.Order order1 = orderManager.createOrder(testCustomer, List.of(item1));
        com.zalando.lite.order.Order order2 = orderManager.createOrder(testCustomer, List.of(item2));

        // Retrieve stored orders
        List<Order> orders = orderManager.getOrdersForCustomer(testCustomer.getId());

        //  Assert that both orders are stored
        assertEquals(2, orders.size(), "Customer should have 2 stored orders.");
        assertTrue(orders.contains(order1), "Order list should contain first order.");
        assertTrue(orders.contains(order2), "Order list should contain second order.");

    }

    @Test
    void testInventoryUpdatedAfterOrder() {
        // Add product with known stock
        Product product = new Product("Wireless Mouse", "electronics", 25.99, 8);
        inventoryManager.addProduct(product); // ID should be 1000
        int id = product.getId();

        // Place order that reduces some stock
        OrderItem item = new OrderItem(product, 3); // ordering 3

        testCustomer.setName("Elias"); //Set up the customer
        orderManager.createOrder(testCustomer, List.of(item)); // Place the order

        //Check that stock value is correctly reduced
        Product updated = inventoryManager.findProductById(id);
        assertNotNull(updated, "Product should still be retrievable after order.");
        assertEquals(5, updated.getStock(), "Stock should be reduced from 8 to 5.");
    }

    @AfterEach
    void tearDown() {
        // Reset fields if necessary (optional for logic-based unit tests)
    }
}
